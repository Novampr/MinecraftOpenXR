plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    shade
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    shade(project(path: ":openxr"))

    modApi("dev.architectury:architectury-fabric:${rootProject.architectury_version}") { exclude group: "net.fabricmc" exclude group: "net.fabricmc.fabric-api" }

    include(implementation('com.electronwill.night-config:toml:3.6.6'))
    include(implementation('com.electronwill.night-config:core:3.6.6'))

    include(implementation("org.lwjgl:lwjgl-openxr:${rootProject.openxr_version}"))

    include implementation("com.electronwill.night-config:core:${rootProject.night_config_version}")
    include implementation("com.electronwill.night-config:toml:${rootProject.night_config_version}")
}

processResources {
    inputs.property "mod_version", project.version

    filesMatching("fabric.mod.json") {
        expand "mod_version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon,project.configurations.shade]
    archiveClassifier.set("dev-shadow")

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set('fabric')
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}