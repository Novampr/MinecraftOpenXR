plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}
loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    shade
    bundle {
        // bundle command, to copy jar contents with the shadow plugin
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        url "https://maven.su5ed.dev/releases"
        content {
            excludeGroup("org.lwjgl")
        }
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
    shade(project(path: ":openxr"))

    modApi("dev.architectury:architectury-neoforge:${rootProject.architectury_version}")

    implementation "org.sinytra.forgified-fabric-api:forgified-fabric-api:${rootProject.forgified_fabric_api_version}"

    bundle(forgeRuntimeLibrary("org.lwjgl:lwjgl-openxr:${rootProject.openxr_version}"))

    include implementation("com.electronwill.night-config:core:${rootProject.night_config_version}")
    include implementation("com.electronwill.night-config:toml:${rootProject.night_config_version}")
}

processResources {
    inputs.property "mod_version", project.version
    inputs.property "neoforge_version", rootProject.neoforge_version

    filesMatching("META-INF/neoforge.mods.toml") {
        HashMap<String, Object> map = new HashMap<>()
        map.put("mod_version", project.version)
        map.put("neoforge_version", rootProject.neoforge_version)
        expand map
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [
            project.configurations.shadowCommon,
            project.configurations.bundle
    ]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set('neoforge')
    atAccessWideners.add("mcoxr.accesswidener")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}